#!/bin/bash
#***********************************************************************
#*                   GNU Lesser General Public License
#*
#* This file is part of the SHiELD Build System.
#*
#* The SHiELD Build System free software: you can redistribute it
#* and/or modify it under the terms of the
#* GNU Lesser General Public License as published by the
#* Free Software Foundation, either version 3 of the License, or
#* (at your option) any later version.
#*
#* The SHiELD Build System distributed in the hope that it will be
#* useful, but WITHOUT ANY WARRANTY; without even the implied warranty
#* of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#* See the GNU General Public License for more details.
#*
#* You should have received a copy of the GNU Lesser General Public
#* License along with theSHiELD Build System
#* If not, see <http://www.gnu.org/licenses/>.
#***********************************************************************
#
#  DISCLAIMER: This script is provided as-is and as such is unsupported.
#
set -x
#
# set default values
# configure your build parameters
  COMPILER="intel"
  BIT="64bit"
  COMP="" # implies PROD=Y
#
# parse arguments
  for arg in "$@"
  do
      case $arg in
        prod|repro|debug)
          if [ ${arg#} = 'repro' ] ; then
            COMP="REPRO=Y"
          elif [ ${arg#} = 'debug' ] ; then
            COMP="DEBUG=Y"
          fi
          shift # Remove COMP from processing
          ;;
          intel|gnu)
             COMPILER="${arg#*=}"
             shift # Remove "compiler" from processing
             ;;
          *)
          if [ ${arg#} != '--help' ] && [ ${arg#} != '-h' ] ; then
            echo "option "${arg#}" not found"
          fi
          echo -e ' '
          echo -e "valid options are:"
          echo -e "\t[intel(D) | gnu] \t\t\t compiler"
          echo -e "\t[prod(D) | repro | debug] \t\t compiler option settings"
          echo -e "\n"
          exit
          ;;
      esac
  done

#
# set up some default variables if not called from COMPILE
# BUILD_ROOT is set if this script is called from the COMPILE script
if [ -z ${BUILD_ROOT} ] ; then
   export BUILD_ROOT=${PWD%/*}
   export SHiELD_SRC=${PWD%/*/*}/SHiELD_SRC/
   export PATH="${BUILD_ROOT}/mkmf/bin:${BUILD_ROOT}/Build/mk_scripts:${PATH}"
   export LIBS_DIR=${BUILD_ROOT}/Build
   if [ ! -z ${EXTERNAL_LIBS} ] ; then
      export LIBS_DIR=${EXTERNAL_LIBS}
   fi
   # load the proper environment for your machine
   . ${BUILD_ROOT}/site/environment.${COMPILER}.sh
fi



mkdir -p ${LIBS_DIR}/lm4/${COMPILER}
list_paths -l -o ${LIBS_DIR}/lm4/${COMPILER}/pathnames_lm4 \
    ${SHiELD_SRC}/LM4p 
cd ${LIBS_DIR}

pushd lm4/${COMPILER}

 
mkmf -m Makefile -a ${SHiELD_SRC} -p liblm4.a -t "${BUILD_ROOT}/${TEMPLATE}" \
     -c "-DINTERNAL_FILE_NML -Duse_yaml -Duse_netCDF -DDEBUG_LAND_TILE_DIAG" -o "-I${LIBS_DIR}/libFMS/${COMPILER}/${BIT}/"  -I${SHiELD_SRC}/FMS/amip_interp/include  -I${SHiELD_SRC}/FMS/astronomy/include \
     -I${SHiELD_SRC}/FMS/axis_utils/include -I${SHiELD_SRC}/FMS/column_diagnostics/include -I${SHiELD_SRC}/FMS/include \
     -I${SHiELD_SRC}/FMS/data_override/include -I${SHiELD_SRC}/FMS/diag_integral/include -I${SHiELD_SRC}/FMS/diag_manager/include -I${SHiELD_SRC}/FMS/field_manager/include \
     -I${SHiELD_SRC}/FMS/fms/include -I${SHiELD_SRC}/FMS/fms2_io/include -I${SHiELD_SRC}/FMS/horiz_interp/include -I${SHiELD_SRC}/FMS/include -I${SHiELD_SRC}/FMS/interpolator/include \
     -I${SHiELD_SRC}/FMS/monin_obukhov/include -I${SHiELD_SRC}/FMS/mosaic2/include -I${SHiELD_SRC}/FMS/mpp/include -I${SHiELD_SRC}/FMS/random_numbers/include -I${SHiELD_SRC}/FMS/sat_vapor_pres/include \
     -I${SHiELD_SRC}/FMS/string_utils/include -I${SHiELD_SRC}/FMS/test_fms/data_override/include -I${SHiELD_SRC}/FMS/test_fms/fms/include -I${SHiELD_SRC}/FMS/time_interp/include \
     -I${SHiELD_SRC}/FMS/topography/include -I${SHiELD_SRC}/FMS/tracer_manager/include -I${SHiELD_SRC}/FMS/tridiagonal/include ${LIBS_DIR}/lm4/${COMPILER}/pathnames_lm4
 
make -j8 ${COMP} AVX=Y NETCDF=3 Makefile liblm4.a >& Build_lm4.out

################
#will get noise with openmp in debugmode
################

# test and report on libFMS build success
if [ $? -ne 0 ] ; then
  echo ">>> ${LIBS_DIR}/lm4/${COMPILER} build failed"
  exit 1
fi
echo " liblm4 build successful"

popd
